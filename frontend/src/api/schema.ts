/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/undefined/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List available LLM models
         *
         *     Returns a list of the available models sorted by creation date.
         *     Models may vary based on system configuration and user permissions. */
        get: operations["GetModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a chat completion
         *
         *     Creates a completion for the chat message. This endpoint is compatible
         *     with the OpenAI Chat API format but can work with multiple LLM providers.
         *
         *     The completion includes choices which contain generated messages from the model.
         *     Response format can be controlled by the request parameters. */
        post: operations["CreateChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/{botId}/knowledge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all knowledge items for a specific bot */
        get: operations["GetKnowledgeItems"];
        put?: never;
        /** @description Add a new knowledge item to a bot */
        post: operations["AddKnowledgeItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/{botId}/knowledge/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a knowledge item */
        put: operations["UpdateKnowledgeItem"];
        post?: never;
        /** @description Delete a knowledge item */
        delete: operations["DeleteKnowledgeItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all bots for the authenticated user
         *
         *     Returns a list of Discord bots owned by the authenticated user,
         *     including their configuration and status. */
        get: operations["GetUserBots"];
        put?: never;
        /** @description Create a new bot
         *
         *     Creates a new Discord bot with the specified configuration.
         *     The bot will be owned by the authenticated user. */
        post: operations["CreateBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a specific bot by ID
         *
         *     Returns detailed information about a specific bot owned by the authenticated user. */
        get: operations["GetBotById"];
        /** @description Update an existing bot
         *
         *     Updates the configuration of an existing bot owned by the authenticated user. */
        put: operations["UpdateBot"];
        post?: never;
        /** @description Delete a bot
         *
         *     Deletes a bot owned by the authenticated user.
         *     If the bot is currently running, it will be stopped before deletion. */
        delete: operations["DeleteBot"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/{id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Start a bot
         *
         *     Starts a Discord bot that is currently stopped. */
        post: operations["StartBotById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/{id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Stop a bot
         *
         *     Stops a Discord bot that is currently running. */
        post: operations["StopBotById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/undefined/{id}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Generate an invite link for a bot
         *
         *     Creates an OAuth2 invite link that users can use to add the bot to their Discord servers.
         *     The link includes permissions necessary for the bot to function properly. */
        get: operations["GenerateInviteLink"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Placeholder interface for LLMModelData
         *     This will be replaced with the actual definition by sync-types.js */
        LLMModelData: {
            id: string;
            object: string;
            /** Format: double */
            created: number;
            owned_by: string;
        };
        /** @description Placeholder interface for LLMModelsResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        LLMModelsResponseDto: {
            object: string;
            data: components["schemas"]["LLMModelData"][];
        };
        /** @description Placeholder interface for ErrorResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        ErrorResponseDto: {
            message: string;
            error?: string;
        };
        /** @description Placeholder interface for LLMCompletionMessage
         *     This will be replaced with the actual definition by sync-types.js */
        LLMCompletionMessage: {
            role: string;
            content: string;
            name?: string;
        };
        /** @description Placeholder interface for LLMCompletionResponseChoice
         *     This will be replaced with the actual definition by sync-types.js */
        LLMCompletionResponseChoice: {
            /** Format: double */
            index: number;
            message: components["schemas"]["LLMCompletionMessage"];
            finish_reason: string;
        };
        /** @description Placeholder interface for LLMCompletionResponseUsage
         *     This will be replaced with the actual definition by sync-types.js */
        LLMCompletionResponseUsage: {
            /** Format: double */
            prompt_tokens: number;
            /** Format: double */
            completion_tokens: number;
            /** Format: double */
            total_tokens: number;
        };
        /** @description Placeholder interface for LLMCompletionResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        LLMCompletionResponseDto: {
            id: string;
            object: string;
            /** Format: double */
            created: number;
            model: string;
            choices: components["schemas"]["LLMCompletionResponseChoice"][];
            usage: components["schemas"]["LLMCompletionResponseUsage"];
        };
        /** @description Placeholder interface for LLMCompletionRequestDto
         *     This will be replaced with the actual definition by sync-types.js */
        LLMCompletionRequestDto: {
            model: string;
            messages: components["schemas"]["LLMCompletionMessage"][];
            /** Format: double */
            temperature?: number;
            /** Format: double */
            top_p?: number;
            /** Format: double */
            n?: number;
            stream?: boolean;
            stop?: string | string[];
            /** Format: double */
            max_tokens?: number;
            /** Format: double */
            presence_penalty?: number;
            /** Format: double */
            frequency_penalty?: number;
            user?: string;
        };
        /** @description Placeholder interface for KnowledgeItemDto
         *     This will be replaced with the actual definition by sync-types.js */
        KnowledgeItemDto: {
            /** Format: double */
            id: number;
            title: string;
            content: string;
            type: string;
            /** Format: double */
            priority: number;
            createdAt: string;
            updatedAt: string;
        };
        /** @description Placeholder interface for KnowledgeBaseResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        KnowledgeBaseResponseDto: {
            botId: string;
            items: components["schemas"]["KnowledgeItemDto"][];
        };
        /** @description Placeholder interface for MessageResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        MessageResponseDto: {
            message: string;
        };
        /** @description Placeholder interface for UserResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        UserResponseDto: {
            id: string;
            discordId: string;
            username: string;
            discriminator: string;
            avatar: string;
            email: string;
            bots: string[];
        };
        /** @description Placeholder interface for UserProfileResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        UserProfileResponseDto: {
            user: components["schemas"]["UserResponseDto"];
        };
        /**
         * @description Placeholder enum for BotStatus
         *     This will be replaced with the actual definition by sync-types.js
         * @enum {string}
         */
        BotStatus: "offline" | "online" | "error";
        /** @description Placeholder interface for KnowledgeBase
         *     This will be replaced with the actual definition by sync-types.js */
        KnowledgeBase: {
            id: string;
            name: string;
            content: string;
            /** @enum {string} */
            type: "text" | "file";
            source?: string;
        };
        /**
         * @description Placeholder enum for ImageProvider
         *     This will be replaced with the actual definition by sync-types.js
         * @enum {string}
         */
        ImageProvider: "openai" | "stability" | "midjourney";
        /** @description Placeholder interface for ImageGenerationConfig
         *     This will be replaced with the actual definition by sync-types.js */
        ImageGenerationConfig: {
            enabled: boolean;
            provider: components["schemas"]["ImageProvider"];
            apiKey?: string;
            model?: string;
        };
        /** @description Placeholder interface for ToolParameter
         *     This will be replaced with the actual definition by sync-types.js */
        ToolParameter: {
            name: string;
            type: string;
            description: string;
            required: boolean;
        };
        /** @description Placeholder interface for Tool
         *     This will be replaced with the actual definition by sync-types.js */
        Tool: {
            id: string;
            name: string;
            description: string;
            parameters: components["schemas"]["ToolParameter"][];
            implementation: string;
        };
        /** @description Placeholder interface for BotConfiguration
         *     This will be replaced with the actual definition by sync-types.js */
        BotConfiguration: {
            systemPrompt: string;
            personality: string;
            traits: string[];
            backstory: string;
            /** @enum {string} */
            llmProvider: "openai" | "anthropic" | "google" | "custom";
            llmModel: string;
            apiKey: string;
            knowledge: components["schemas"]["KnowledgeBase"][];
            imageGeneration: components["schemas"]["ImageGenerationConfig"];
            toolsEnabled: boolean;
            tools: components["schemas"]["Tool"][];
        };
        /** @description Placeholder interface for BotResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        BotResponseDto: {
            id: string;
            userId: string;
            name: string;
            discordToken?: string;
            applicationId: string;
            status: components["schemas"]["BotStatus"];
            intents: string[];
            configuration: components["schemas"]["BotConfiguration"];
            createdAt: string;
            updatedAt: string;
        };
        /** @description Placeholder interface for BotsResponseDto
         *     This will be replaced with the actual definition by sync-types.js */
        BotsResponseDto: {
            bots: components["schemas"]["BotResponseDto"][];
        };
        /** @description Placeholder interface for CreateBotRequest
         *     This will be replaced with the actual definition by sync-types.js */
        CreateBotRequest: {
            name: string;
            discordToken: string;
            applicationId: string;
            intents?: string[];
            configuration?: components["schemas"]["BotConfiguration"];
        };
        /** @description Placeholder interface for UpdateBotRequest
         *     This will be replaced with the actual definition by sync-types.js */
        UpdateBotRequest: {
            name?: string;
            discordToken?: string;
            applicationId?: string;
            intents?: string[];
            status?: components["schemas"]["BotStatus"];
            configuration?: components["schemas"]["BotConfiguration"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelsResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    CreateChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMCompletionRequestDto"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMCompletionResponseDto"];
                };
            };
            /** @description Invalid Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetKnowledgeItems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeBaseResponseDto"];
                };
            };
        };
    };
    AddKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: double */
                    priority?: number;
                    type: string;
                    content: string;
                    title: string;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeItemDto"];
                };
            };
        };
    };
    UpdateKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
                /** @description The unique identifier of the knowledge item */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: double */
                    priority?: number;
                    type?: string;
                    content?: string;
                    title?: string;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeItemDto"];
                };
            };
        };
    };
    DeleteKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
                /** @description The unique identifier of the knowledge item */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
        };
    };
    Login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"] | components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    Register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"] | components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponseDto"] | components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    Logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"] | components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetUserBots: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotsResponseDto"];
                };
            };
        };
    };
    CreateBot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBotRequest"];
            };
        };
        responses: {
            /** @description Bot created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponseDto"];
                };
            };
        };
    };
    GetBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        bot: components["schemas"]["BotResponseDto"];
                    };
                };
            };
        };
    };
    UpdateBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to update */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBotRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponseDto"];
                };
            };
        };
    };
    DeleteBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
        };
    };
    StartBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to start */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponseDto"];
                };
            };
        };
    };
    StopBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to stop */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponseDto"];
                };
            };
        };
    };
    GenerateInviteLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        inviteUrl: string;
                    };
                };
            };
        };
    };
}
