/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/llm/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List available LLM models
         *
         *     Returns a list of the available models sorted by creation date.
         *     Models may vary based on system configuration and user permissions. */
        get: operations["GetModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a chat completion
         *
         *     Creates a completion for the chat message. This endpoint is compatible
         *     with the OpenAI Chat API format but can work with multiple LLM providers.
         *
         *     The completion includes choices which contain generated messages from the model.
         *     Response format can be controlled by the request parameters. */
        post: operations["CreateChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bots/{botId}/knowledge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all knowledge items for a specific bot */
        get: operations["GetKnowledgeItems"];
        put?: never;
        /** @description Add a new knowledge item to a bot */
        post: operations["AddKnowledgeItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bots/{botId}/knowledge/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a knowledge item */
        put: operations["UpdateKnowledgeItem"];
        post?: never;
        /** @description Delete a knowledge item */
        delete: operations["DeleteKnowledgeItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all bots for the authenticated user
         *
         *     Returns a list of Discord bots owned by the authenticated user,
         *     including their configuration and status. */
        get: operations["GetUserBots"];
        put?: never;
        /** @description Create a new bot
         *
         *     Creates a new Discord bot with the specified configuration.
         *     The bot will be owned by the authenticated user. */
        post: operations["CreateBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bots/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a specific bot by ID
         *
         *     Returns detailed information about a specific bot owned by the authenticated user. */
        get: operations["GetBotById"];
        /** @description Update an existing bot
         *
         *     Updates the configuration of an existing bot owned by the authenticated user. */
        put: operations["UpdateBot"];
        post?: never;
        /** @description Delete a bot
         *
         *     Deletes a bot owned by the authenticated user.
         *     If the bot is currently running, it will be stopped before deletion. */
        delete: operations["DeleteBot"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bots/{id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Start a bot
         *
         *     Starts a Discord bot that is currently stopped. */
        post: operations["StartBotById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bots/{id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Stop a bot
         *
         *     Stops a Discord bot that is currently running. */
        post: operations["StopBotById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bots/{id}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Generate an invite link for a bot
         *
         *     Creates an OAuth2 invite link that users can use to add the bot to their Discord servers.
         *     The link includes permissions necessary for the bot to function properly. */
        get: operations["GenerateInviteLink"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the authenticated user's profile */
        get: operations["GetUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Log out the current user */
        post: operations["Logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LLMModelData: {
            id: string;
            object: string;
            /** Format: double */
            created: number;
            owned_by: string;
        };
        LLMModelsResponseDto: {
            object: string;
            data: components["schemas"]["LLMModelData"][];
        };
        LLMCompletionMessage: {
            role: string;
            content: string;
            name?: string;
        };
        LLMCompletionResponseChoice: {
            /** Format: double */
            index: number;
            message: components["schemas"]["LLMCompletionMessage"];
            finish_reason: string;
        };
        LLMCompletionResponseUsage: {
            /** Format: double */
            prompt_tokens: number;
            /** Format: double */
            completion_tokens: number;
            /** Format: double */
            total_tokens: number;
        };
        LLMCompletionResponseDto: {
            id: string;
            object: string;
            /** Format: double */
            created: number;
            model: string;
            choices: components["schemas"]["LLMCompletionResponseChoice"][];
            usage: components["schemas"]["LLMCompletionResponseUsage"];
        };
        LLMCompletionRequestDto: {
            model: string;
            messages: components["schemas"]["LLMCompletionMessage"][];
            /** Format: double */
            temperature?: number;
            /** Format: double */
            top_p?: number;
            /** Format: double */
            n?: number;
            stream?: boolean;
            stop?: string | string[];
            /** Format: double */
            max_tokens?: number;
            /** Format: double */
            presence_penalty?: number;
            /** Format: double */
            frequency_penalty?: number;
            user?: string;
        };
        /** @description Knowledge item DTO for API responses */
        KnowledgeItemDto: {
            /** Format: double */
            id: number;
            title: string;
            content: string;
            type: string;
            /** Format: double */
            priority: number;
            createdAt: string;
            updatedAt: string;
        };
        KnowledgeBaseResponseDto: {
            botId: string;
            items: components["schemas"]["KnowledgeItemDto"][];
        };
        MessageResponseDto: {
            message: string;
        };
        /**
         * @description Common Types
         *
         *     This is the main entry point for all shared type definitions
         *     between frontend and backend.
         * @enum {string}
         */
        BotStatus: "offline" | "online" | "error";
        BotResponseDto: {
            id: string;
            userId: string;
            name: string;
            discordToken?: string;
            applicationId: string;
            status: components["schemas"]["BotStatus"];
            intents: string[];
            configuration: {
                tools: {
                    parameters: {
                        required: boolean;
                        description: string;
                        type: string;
                        name: string;
                    }[];
                    description: string;
                    name: string;
                    id: string;
                }[];
                toolsEnabled: boolean;
                imageGeneration: {
                    model?: string;
                    provider: string;
                    enabled: boolean;
                };
                knowledge: {
                    source?: string;
                    type: string;
                    content: string;
                    name: string;
                    id: string;
                }[];
                llmModel: string;
                llmProvider: string;
                backstory: string;
                traits: string[];
                personality: string;
                systemPrompt: string;
            };
            createdAt: string;
            updatedAt: string;
        };
        BotsResponseDto: {
            bots: components["schemas"]["BotResponseDto"][];
        };
        CreateBotRequest: {
            name: string;
            discordToken: string;
            applicationId: string;
            intents?: string[];
            configuration?: {
                tools?: {
                    parameters?: {
                        required: boolean;
                        description: string;
                        type: string;
                        name: string;
                    }[];
                    description: string;
                    name: string;
                    id?: string;
                }[];
                toolsEnabled?: boolean;
                imageGeneration?: {
                    model?: string;
                    provider?: string;
                    enabled?: boolean;
                };
                knowledge?: {
                    source?: string;
                    type: string;
                    content: string;
                    name: string;
                    id?: string;
                }[];
                llmModel?: string;
                llmProvider?: string;
                backstory?: string;
                traits?: string[];
                personality?: string;
                systemPrompt?: string;
            };
        };
        UpdateBotRequest: {
            name?: string;
            discordToken?: string;
            applicationId?: string;
            intents?: string[];
            status?: components["schemas"]["BotStatus"];
            configuration?: {
                tools?: {
                    implementation?: string;
                    parameters?: {
                        required: boolean;
                        description: string;
                        type: string;
                        name: string;
                    }[];
                    description: string;
                    name: string;
                    id: string;
                }[];
                toolsEnabled?: boolean;
                imageGeneration?: {
                    apiKey?: string;
                    model?: string;
                    provider?: string;
                    enabled?: boolean;
                };
                knowledge?: {
                    source?: string;
                    type: string;
                    content: string;
                    name: string;
                    id?: string;
                }[];
                apiKey?: string;
                llmModel?: string;
                llmProvider?: string;
                backstory?: string;
                traits?: string[];
                personality?: string;
                systemPrompt?: string;
            };
        };
        UserResponseDto: {
            id: string;
            discordId: string;
            username: string;
            discriminator: string;
            avatar: string;
            email: string;
            bots: string[];
        };
        UserProfileResponseDto: {
            user: components["schemas"]["UserResponseDto"];
        };
        ErrorResponseDto: {
            message: string;
            error?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelsResponseDto"];
                };
            };
        };
    };
    CreateChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMCompletionRequestDto"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMCompletionResponseDto"];
                };
            };
        };
    };
    GetKnowledgeItems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeBaseResponseDto"];
                };
            };
        };
    };
    AddKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: double */
                    priority?: number;
                    type: string;
                    content: string;
                    title: string;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeItemDto"];
                };
            };
        };
    };
    UpdateKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
                /** @description The unique identifier of the knowledge item */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: double */
                    priority?: number;
                    type?: string;
                    content?: string;
                    title?: string;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeItemDto"];
                };
            };
        };
    };
    DeleteKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
                /** @description The unique identifier of the knowledge item */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
        };
    };
    GetUserBots: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotsResponseDto"];
                };
            };
        };
    };
    CreateBot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBotRequest"];
            };
        };
        responses: {
            /** @description Bot created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponseDto"];
                };
            };
        };
    };
    GetBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        bot: components["schemas"]["BotResponseDto"];
                    };
                };
            };
        };
    };
    UpdateBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to update */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBotRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponseDto"];
                };
            };
        };
    };
    DeleteBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
        };
    };
    StartBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to start */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponseDto"];
                };
            };
        };
    };
    StopBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to stop */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponseDto"];
                };
            };
        };
    };
    GenerateInviteLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        inviteUrl: string;
                    };
                };
            };
        };
    };
    GetUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    Logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
}
