/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tools/{botId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all tool definitions for a bot */
        get: operations["GetToolsByBotId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools/{botId}/enabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get enabled tool definitions for a bot */
        get: operations["GetEnabledToolsByBotId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get tool definition by ID */
        get: operations["GetToolById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new tool definition */
        post: operations["CreateTool"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a tool definition */
        put: operations["UpdateTool"];
        post?: never;
        /** @description Delete a tool definition */
        delete: operations["DeleteTool"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools/{id}/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Toggle tool enabled status */
        put: operations["ToggleToolStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools/bot/{botId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete all tool definitions for a bot */
        delete: operations["DeleteAllToolsForBot"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List available LLM models
         *
         *     Returns a list of the available models sorted by creation date.
         *     Models may vary based on system configuration and user permissions. */
        get: operations["GetModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a chat completion
         *
         *     Creates a completion for the chat message. This endpoint is compatible
         *     with the OpenAI Chat API format but can work with multiple LLM providers.
         *
         *     The completion includes choices which contain generated messages from the model.
         *     Response format can be controlled by the request parameters. */
        post: operations["CreateChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get available LLM providers
         *
         *     Returns the list of supported LLM providers in the system.
         *     This helps clients know which providers are available. */
        get: operations["GetProviders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/providers/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check if a specific provider is available
         *
         *     Validates if the requested LLM provider is supported and available. */
        get: operations["CheckProviderAvailability"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/providers/{provider}/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get models for a specific provider
         *
         *     Returns the models available for the specified provider.
         *     Results are cached to avoid rate limiting but will be refreshed
         *     if the cache is too old. */
        get: operations["GetProviderModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/models/all-providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get models for all available providers
         *
         *     Returns models available for all providers in the system.
         *     Results are cached to avoid rate limiting but will be refreshed
         *     if the cache is too old. */
        get: operations["GetAllProviderModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/providers/{provider}/models/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Force refresh models for a provider
         *
         *     Forces a refresh of the model cache for the specified provider.
         *     This will make a new API call to the provider to get the latest models. */
        post: operations["RefreshProviderModels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/providers/{provider}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Enable or disable a provider
         *
         *     Updates the status of a provider to either enabled or disabled.
         *     Providers must be enabled to be used in the system. */
        put: operations["UpdateProviderStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/providers/custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Configure a custom provider
         *
         *     Adds or updates a custom provider configuration.
         *     Custom providers must follow the OpenAI-compatible API format. */
        post: operations["ConfigureCustomProvider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm/providers/custom/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove a custom provider
         *
         *     Removes a custom provider from the system by name. */
        delete: operations["RemoveCustomProvider"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{botId}/knowledge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all knowledge items for a specific bot */
        get: operations["GetKnowledgeItems"];
        put?: never;
        /** @description Add a new knowledge item to a bot */
        post: operations["AddKnowledgeItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{botId}/knowledge/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a knowledge item */
        put: operations["UpdateKnowledgeItem"];
        post?: never;
        /** @description Delete a knowledge item */
        delete: operations["DeleteKnowledgeItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Login with credentials */
        post: operations["Login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Register a new user */
        post: operations["Register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current user profile */
        get: operations["GetProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout current user */
        post: operations["Logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all bots for the authenticated user
         *
         *     Returns a list of Discord bots owned by the authenticated user,
         *     including their configuration and status. */
        get: operations["GetUserBots"];
        put?: never;
        /** @description Create a new bot
         *
         *     Creates a new Discord bot with the specified configuration.
         *     The bot will be owned by the authenticated user. */
        post: operations["CreateBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a specific bot by ID
         *
         *     Returns detailed information about a specific bot owned by the authenticated user. */
        get: operations["GetBotById"];
        /** @description Update an existing bot
         *
         *     Updates the configuration of an existing bot owned by the authenticated user. */
        put: operations["UpdateBot"];
        post?: never;
        /** @description Delete a bot
         *
         *     Deletes a bot owned by the authenticated user.
         *     If the bot is currently running, it will be stopped before deletion. */
        delete: operations["DeleteBot"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Start a bot
         *
         *     Starts a Discord bot that is currently stopped. */
        post: operations["StartBotById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Stop a bot
         *
         *     Stops a Discord bot that is currently running. */
        post: operations["StopBotById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{id}/configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update bot configuration
         *
         *     Updates the configuration of a bot without changing other properties.
         *     This is a specialized endpoint for updating bot configuration settings. */
        put: operations["UpdateBotConfiguration"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{id}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Generate an invite link for a bot
         *
         *     Creates an OAuth2 invite link that users can use to add the bot to their Discord servers.
         *     The link includes permissions necessary for the bot to function properly. */
        get: operations["GenerateInviteLink"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/validate-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Validate Discord bot token
         *
         *     Validates a Discord bot token and checks if message content intent is enabled.
         *     This endpoint doesn't require authentication as it's used during bot creation. */
        post: operations["ValidateToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{id}/register-commands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Force register slash commands for a bot in a specific server
         *
         *     Manually triggers the registration of slash commands for a bot in a specific Discord server.
         *     This can help when commands aren't showing up due to propagation delays or other issues. */
        post: operations["RegisterBotCommands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/constants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all application constants */
        get: operations["GetConstants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Tool Definition DTO */
        ToolDefinitionDto: {
            id?: string;
            botId: string;
            name: string;
            description: string;
            schema: Record<string, never>;
            enabled: boolean;
            createdAt?: string;
            updatedAt?: string;
        };
        /** @description Tool Definitions Response Data */
        ToolDefinitionsResponseDto: {
            tools: components["schemas"]["ToolDefinitionDto"][];
        };
        /** @description Create Tool Request */
        CreateToolRequest: {
            botId: string;
            name: string;
            description: string;
            schema: Record<string, never>;
            enabled?: boolean;
        };
        /** @description Update Tool Request */
        UpdateToolRequest: {
            name?: string;
            description?: string;
            schema?: Record<string, never>;
            enabled?: boolean;
        };
        /** @description Toggle Tool Status Request */
        ToggleToolStatusRequest: {
            enabled: boolean;
        };
        /** @description Model capabilities and features */
        ModelCapabilities: {
            input_modalities: string[];
            output_modalities: string[];
            supports_tool_calling?: boolean;
            supports_streaming?: boolean;
            supports_vision?: boolean;
        };
        /** @description Model pricing information */
        ModelPricing: {
            /** Format: double */
            prompt_tokens: number;
            /** Format: double */
            completion_tokens: number;
            currency?: string;
        };
        /** @description LLM Model Data Structure */
        LLMModelData: {
            id: string;
            object: string;
            /** Format: double */
            created: number;
            owned_by: string;
            display_name: string;
            provider_model_id: string;
            capabilities?: components["schemas"]["ModelCapabilities"];
            /** Format: double */
            context_length?: number;
            pricing?: components["schemas"]["ModelPricing"];
            /** Format: double */
            max_tokens?: number;
        };
        /** @description LLM Models Response */
        LLMModelsResponseDto: {
            object: string;
            data: components["schemas"]["LLMModelData"][];
        };
        /** @description Standard Error Response DTO */
        ErrorResponseDto: {
            message: string;
            error?: string;
        };
        /** @description LLM Completion Message */
        LLMCompletionMessage: {
            role: string;
            content: string;
            name?: string;
        };
        /** @description LLM Completion Response Choice */
        LLMCompletionResponseChoice: {
            /** Format: double */
            index: number;
            message: components["schemas"]["LLMCompletionMessage"];
            finish_reason: string;
        };
        /** @description LLM Completion Response Usage */
        LLMCompletionResponseUsage: {
            /** Format: double */
            prompt_tokens: number;
            /** Format: double */
            completion_tokens: number;
            /** Format: double */
            total_tokens: number;
        };
        /** @description LLM Completion Response */
        LLMCompletionResponseDto: {
            id: string;
            object: string;
            /** Format: double */
            created: number;
            model: string;
            choices: components["schemas"]["LLMCompletionResponseChoice"][];
            usage: components["schemas"]["LLMCompletionResponseUsage"];
        };
        /**
         * @description LLM Provider Enum - Supported providers
         * @enum {string}
         */
        LLMProvider: "openai" | "anthropic" | "google" | "groq" | "cohere" | "deepseek" | "mistral" | "amazon" | "azure" | "fireworks" | "togetherai" | "perplexity" | "deepinfra" | "xai" | "ollama" | "huggingface" | "cerebras" | "elevenlabs" | "gladia" | "assemblyai" | "revai" | "deepgram" | "lmnt" | "hume" | "openrouter" | "chutes" | "custom";
        /** @description LLM Completion Request */
        LLMCompletionRequestDto: {
            model: string;
            provider?: components["schemas"]["LLMProvider"];
            messages: components["schemas"]["LLMCompletionMessage"][];
            /** Format: double */
            temperature?: number;
            /** Format: double */
            top_p?: number;
            /** Format: double */
            n?: number;
            stream?: boolean;
            stop?: string | string[];
            /** Format: double */
            max_tokens?: number;
            /** Format: double */
            presence_penalty?: number;
            /** Format: double */
            frequency_penalty?: number;
            user?: string;
        };
        /** @description Provider Models Response - Contains models available for a specific
         *     provider */
        ProviderModelsResponseDto: {
            provider: components["schemas"]["LLMProvider"];
            provider_display_name: string;
            models: components["schemas"]["LLMModelData"][];
            /** Format: double */
            last_updated: number;
        };
        /** @description All Provider Models Response - Contains models for all available
         *     providers */
        AllProviderModelsResponseDto: {
            providers: components["schemas"]["ProviderModelsResponseDto"][];
        };
        /** @description Custom Provider Configuration */
        CustomProviderConfig: {
            name: string;
            endpoint_url: string;
            api_key_env_var: string;
            models: components["schemas"]["LLMModelData"][];
        };
        /** @description Token Validation Result */
        TokenValidationResult: {
            valid: boolean;
            messageContentEnabled: boolean;
            botId?: string;
            username?: string;
            error?: string;
        };
        /** @description Construct a type with a set of properties K of type T */
        "Record_string.any_": {
            [key: string]: unknown;
        };
        /** @description Provider Configuration - Used to enable/disable and configure providers */
        ProviderConfiguration: {
            enabled: boolean;
            config?: components["schemas"]["Record_string.any_"];
            custom_providers?: components["schemas"]["CustomProviderConfig"][];
        };
        /** @description Construct a type with a set of properties K of type T */
        "Record_LLMProvider.ProviderConfiguration_": {
            openai: components["schemas"]["ProviderConfiguration"];
            anthropic: components["schemas"]["ProviderConfiguration"];
            google: components["schemas"]["ProviderConfiguration"];
            groq: components["schemas"]["ProviderConfiguration"];
            cohere: components["schemas"]["ProviderConfiguration"];
            deepseek: components["schemas"]["ProviderConfiguration"];
            mistral: components["schemas"]["ProviderConfiguration"];
            amazon: components["schemas"]["ProviderConfiguration"];
            azure: components["schemas"]["ProviderConfiguration"];
            fireworks: components["schemas"]["ProviderConfiguration"];
            togetherai: components["schemas"]["ProviderConfiguration"];
            perplexity: components["schemas"]["ProviderConfiguration"];
            deepinfra: components["schemas"]["ProviderConfiguration"];
            xai: components["schemas"]["ProviderConfiguration"];
            ollama: components["schemas"]["ProviderConfiguration"];
            huggingface: components["schemas"]["ProviderConfiguration"];
            cerebras: components["schemas"]["ProviderConfiguration"];
            elevenlabs: components["schemas"]["ProviderConfiguration"];
            gladia: components["schemas"]["ProviderConfiguration"];
            assemblyai: components["schemas"]["ProviderConfiguration"];
            revai: components["schemas"]["ProviderConfiguration"];
            deepgram: components["schemas"]["ProviderConfiguration"];
            lmnt: components["schemas"]["ProviderConfiguration"];
            hume: components["schemas"]["ProviderConfiguration"];
            openrouter: components["schemas"]["ProviderConfiguration"];
            chutes: components["schemas"]["ProviderConfiguration"];
            custom: components["schemas"]["ProviderConfiguration"];
        };
        /** @description Provider Registry Configuration - Contains configuration for all
         *     providers */
        ProviderRegistryConfiguration: {
            providers: components["schemas"]["Record_LLMProvider.ProviderConfiguration_"];
        };
        /** @description LLM Response data */
        LLMResponse: {
            text: string;
            generateImage?: boolean;
            imagePrompt?: string;
            toolCalls?: {
                content?: string;
                type?: string;
                arguments: unknown;
                name: string;
            }[];
        };
        /** @description Knowledge Item Data */
        KnowledgeItemDto: {
            id: number | string;
            title: string;
            content: string;
            type: string;
            /** Format: double */
            priority: number;
            source?: string;
            createdAt: string;
            updatedAt: string;
        };
        /** @description Knowledge Base Response Data */
        KnowledgeBaseResponseDto: {
            botId: string;
            items: components["schemas"]["KnowledgeItemDto"][];
        };
        /** @description Message Response DTO */
        MessageResponseDto: {
            message: string;
            success: boolean;
        };
        /** @description User Response Data */
        UserResponseDto: {
            id: string;
            discordId: string;
            username: string;
            discriminator: string;
            avatar: string;
            email: string;
            bots: string[];
        };
        /** @description User Profile Response Data */
        UserProfileResponseDto: {
            user: components["schemas"]["UserResponseDto"];
        };
        /**
         * @description Bot Status Enum
         * @enum {string}
         */
        BotStatus: "offline" | "online" | "error" | "starting" | "stopping";
        KnowledgeBase: {
            id: string;
            name: string;
            content: string;
            /** @enum {string} */
            type: "text" | "file";
            source?: string;
        };
        /**
         * @description Image Provider Enum
         * @enum {string}
         */
        ImageProvider: "openai" | "stability" | "midjourney" | "together" | "chutes_hidream";
        ImageGenerationConfig: {
            enabled: boolean;
            provider: components["schemas"]["ImageProvider"];
            apiKey?: string;
            model?: string | null;
        };
        ToolParameter: {
            name: string;
            type: string;
            description: string;
            required: boolean;
        };
        Tool: {
            id: string;
            name: string;
            description: string;
            parameters: components["schemas"]["ToolParameter"][];
            implementation: string;
        };
        /**
         * @description Discord Activity Type Enum for bot presence
         * @enum {number}
         */
        ActivityType: 0 | 1 | 2 | 3 | 5 | 4;
        /** @description Bot Appearance Configuration */
        AppearanceConfig: {
            avatarUrl?: string;
            presence?: {
                activity?: {
                    url?: string;
                    type: components["schemas"]["ActivityType"];
                    name: string;
                };
                /** @enum {string} */
                status?: "online" | "idle" | "dnd" | "invisible";
            };
            colors?: {
                accent?: string;
                primary?: string;
            };
        };
        /** @description Bot Configuration Structure */
        BotConfiguration: {
            systemPrompt: string;
            personality: string;
            traits: string[];
            backstory: string;
            llmProvider: components["schemas"]["LLMProvider"];
            llmModel: string;
            apiKey?: string;
            knowledge: components["schemas"]["KnowledgeBase"][];
            imageGeneration: components["schemas"]["ImageGenerationConfig"];
            toolsEnabled: boolean;
            tools: components["schemas"]["Tool"][];
            appearance?: components["schemas"]["AppearanceConfig"];
            visionModel: string;
            visionProvider: string;
        };
        /** @description Bot Response Data */
        BotResponseDto: {
            id: string;
            userId: string;
            name: string;
            discordToken?: string;
            applicationId: string;
            status: components["schemas"]["BotStatus"];
            intents: string[];
            configuration: components["schemas"]["BotConfiguration"];
            createdAt: string;
            updatedAt: string;
        };
        /** @description Get All Bots Response DTO */
        GetAllBotsResponseDto: {
            bots: components["schemas"]["BotResponseDto"][];
        };
        /** @description Get Bot Response DTO */
        GetBotResponseDto: {
            bot: components["schemas"]["BotResponseDto"];
        };
        /** @description Create Bot Response DTO */
        CreateBotResponseDto: {
            id: string;
            userId: string;
            name: string;
            discordToken?: string;
            applicationId: string;
            status: components["schemas"]["BotStatus"];
            intents: string[];
            configuration: components["schemas"]["BotConfiguration"];
            createdAt: string;
            updatedAt: string;
        };
        /** @description Create Bot Request DTO */
        CreateBotRequestDto: {
            name: string;
            discordToken: string;
            applicationId?: string;
            intents?: string[];
            configuration?: components["schemas"]["BotConfiguration"];
        };
        /** @description Update Bot Response DTO */
        UpdateBotResponseDto: {
            id: string;
            userId: string;
            name: string;
            discordToken?: string;
            applicationId: string;
            status: components["schemas"]["BotStatus"];
            intents: string[];
            configuration: components["schemas"]["BotConfiguration"];
            createdAt: string;
            updatedAt: string;
        };
        /** @description Update Bot Request DTO */
        UpdateBotRequestDto: {
            name?: string;
            discordToken?: string;
            applicationId?: string;
            intents?: string[];
            status?: components["schemas"]["BotStatus"];
            configuration?: components["schemas"]["BotConfiguration"];
        };
        /** @description Delete Bot Response DTO */
        DeleteBotResponseDto: {
            message: string;
            success: boolean;
        };
        /** @description Start Bot Response DTO */
        StartBotResponseDto: {
            id: string;
            userId: string;
            name: string;
            discordToken?: string;
            applicationId: string;
            status: components["schemas"]["BotStatus"];
            intents: string[];
            configuration: components["schemas"]["BotConfiguration"];
            createdAt: string;
            updatedAt: string;
        };
        /** @description Stop Bot Response DTO */
        StopBotResponseDto: {
            id: string;
            userId: string;
            name: string;
            discordToken?: string;
            applicationId: string;
            status: components["schemas"]["BotStatus"];
            intents: string[];
            configuration: components["schemas"]["BotConfiguration"];
            createdAt: string;
            updatedAt: string;
        };
        /** @description Update Bot Configuration Response DTO */
        UpdateBotConfigurationResponseDto: {
            id: string;
            userId: string;
            name: string;
            discordToken?: string;
            applicationId: string;
            status: components["schemas"]["BotStatus"];
            intents: string[];
            configuration: components["schemas"]["BotConfiguration"];
            createdAt: string;
            updatedAt: string;
            message: string;
        };
        /** @description Update Bot Configuration Request DTO */
        UpdateBotConfigurationRequestDto: {
            configuration: components["schemas"]["BotConfiguration"];
        };
        /** @description Generate Bot Invite Link Response DTO */
        GenerateBotInviteLinkResponseDto: {
            inviteUrl: string;
        };
        /** @description Bot status structure for API */
        BotStatusConstants: {
            OFFLINE: string;
            ONLINE: string;
            ERROR: string;
            LABELS: {
                error: string;
                online: string;
                offline: string;
            };
            COLORS: {
                error: string;
                online: string;
                offline: string;
            };
        };
        /** @description LLM provider structure for API */
        LlmProviderConstants: {
            OPENAI: string;
            ANTHROPIC: string;
            GOOGLE: string;
            GROQ: string;
            COHERE: string;
            DEEPSEEK: string;
            MISTRAL: string;
            AMAZON: string;
            AZURE: string;
            FIREWORKS: string;
            TOGETHERAI: string;
            PERPLEXITY: string;
            DEEPINFRA: string;
            XAI: string;
            OLLAMA: string;
            HUGGINGFACE: string;
            CEREBRAS: string;
            ELEVENLABS: string;
            GLADIA: string;
            ASSEMBLYAI: string;
            REVAI: string;
            DEEPGRAM: string;
            LMNT: string;
            HUME: string;
            OPENROUTER: string;
            CHUTES: string;
            CUSTOM: string;
            LABELS: {
                custom: string;
                chutes: string;
                openrouter: string;
                hume: string;
                lmnt: string;
                deepgram: string;
                revai: string;
                assemblyai: string;
                gladia: string;
                elevenlabs: string;
                cerebras: string;
                huggingface: string;
                ollama: string;
                xai: string;
                deepinfra: string;
                perplexity: string;
                togetherai: string;
                fireworks: string;
                azure: string;
                amazon: string;
                mistral: string;
                deepseek: string;
                cohere: string;
                groq: string;
                google: string;
                anthropic: string;
                openai: string;
            };
        };
        /** @description Image provider structure for API */
        ImageProviderConstants: {
            OPENAI: string;
            STABILITY: string;
            MIDJOURNEY: string;
            LABELS: {
                midjourney: string;
                stability: string;
                openai: string;
            };
        };
        /** @description HTTP status codes structure for API */
        HttpStatusConstants: {
            /** Format: double */
            OK: number;
            /** Format: double */
            CREATED: number;
            /** Format: double */
            BAD_REQUEST: number;
            /** Format: double */
            UNAUTHORIZED: number;
            /** Format: double */
            FORBIDDEN: number;
            /** Format: double */
            NOT_FOUND: number;
            /** Format: double */
            INTERNAL_SERVER_ERROR: number;
        };
        /** @description Storage keys structure for API */
        StorageKeysConstants: {
            AUTH_STORAGE: string;
            USER_PREFERENCES: string;
            THEME_MODE: string;
            AUTH_TOKEN: string;
            USER_PROFILE: string;
        };
        /** @description Default values structure for API */
        DefaultsConstants: {
            BOT: {
                LLM_MODEL: string;
                LLM_PROVIDER: string;
                TRAITS: string[];
                PERSONALITY: string;
                SYSTEM_PROMPT: string;
            };
        };
        /** @description Environment variable names structure for API */
        EnvVarsConstants: {
            API_URL: string;
            NODE_ENV: string;
            PORT: string;
            DB_PATH: string;
            JWT_SECRET: string;
            DISCORD_CLIENT_ID: string;
            DISCORD_CLIENT_SECRET: string;
            DISCORD_CALLBACK_URL: string;
        };
        /** @description Discord API constants structure for API */
        DiscordApiConstants: {
            BASE_URL: string;
            OAUTH2_URL: string;
            PERMISSIONS: {
                EMBED_LINKS: string;
                ATTACH_FILES: string;
                READ_MESSAGE_HISTORY: string;
                VIEW_CHANNEL: string;
                SEND_MESSAGES: string;
            };
            SCOPES: {
                APPLICATIONS_COMMANDS: string;
                BOT: string;
            };
            PERMISSION_INTEGERS: {
                BASIC_BOT: string;
            };
        };
        /** @description Constants exported from common for frontend use */
        Constants: {
            BOT_STATUS: components["schemas"]["BotStatusConstants"];
            LLM_PROVIDER: components["schemas"]["LlmProviderConstants"];
            IMAGE_PROVIDER: components["schemas"]["ImageProviderConstants"];
            HTTP_STATUS: components["schemas"]["HttpStatusConstants"];
            STORAGE_KEYS: components["schemas"]["StorageKeysConstants"];
            DEFAULTS: components["schemas"]["DefaultsConstants"];
            ENV_VARS: components["schemas"]["EnvVarsConstants"];
            DISCORD_API: components["schemas"]["DiscordApiConstants"];
        };
        /** @description Response DTO for constants */
        ConstantsResponseDto: {
            constants: components["schemas"]["Constants"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetToolsByBotId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDefinitionsResponseDto"];
                };
            };
        };
    };
    GetEnabledToolsByBotId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDefinitionsResponseDto"];
                };
            };
        };
    };
    GetToolById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDefinitionDto"];
                };
            };
        };
    };
    CreateTool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateToolRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDefinitionDto"];
                };
            };
        };
    };
    UpdateTool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateToolRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDefinitionDto"];
                };
            };
        };
    };
    DeleteTool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ToggleToolStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleToolStatusRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDefinitionDto"];
                };
            };
        };
    };
    DeleteAllToolsForBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMModelsResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    CreateChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMCompletionRequestDto"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMCompletionResponseDto"];
                };
            };
            /** @description Invalid Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        providers: components["schemas"]["LLMProvider"][];
                    };
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    CheckProviderAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider: components["schemas"]["LLMProvider"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        available: boolean;
                    };
                };
            };
            /** @description Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetProviderModels: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider: components["schemas"]["LLMProvider"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderModelsResponseDto"];
                };
            };
            /** @description Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetAllProviderModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllProviderModelsResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    RefreshProviderModels: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider: components["schemas"]["LLMProvider"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderModelsResponseDto"];
                };
            };
            /** @description Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    UpdateProviderStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider: components["schemas"]["LLMProvider"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    enabled: boolean;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        enabled: boolean;
                        provider: components["schemas"]["LLMProvider"];
                        success: boolean;
                    };
                };
            };
            /** @description Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    ConfigureCustomProvider: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomProviderConfig"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        provider: components["schemas"]["CustomProviderConfig"];
                        success: boolean;
                    };
                };
            };
            /** @description Invalid Provider Configuration */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    RemoveCustomProvider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        removed: boolean;
                        success: boolean;
                    };
                };
            };
            /** @description Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetKnowledgeItems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeBaseResponseDto"];
                };
            };
        };
    };
    AddKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: double */
                    priority?: number;
                    type: string;
                    content: string;
                    title: string;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeItemDto"];
                };
            };
        };
    };
    UpdateKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
                /** @description The unique identifier of the knowledge item */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: double */
                    priority?: number;
                    type?: string;
                    content?: string;
                    title?: string;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KnowledgeItemDto"];
                };
            };
        };
    };
    DeleteKnowledgeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                botId: string;
                /** @description The unique identifier of the knowledge item */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
        };
    };
    Login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"] | components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    Register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"] | components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponseDto"] | components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    Logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"] | components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    GetUserBots: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllBotsResponseDto"];
                };
            };
        };
    };
    CreateBot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBotRequestDto"];
            };
        };
        responses: {
            /** @description Bot created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateBotResponseDto"];
                };
            };
        };
    };
    GetBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBotResponseDto"];
                };
            };
        };
    };
    UpdateBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to update */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBotRequestDto"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateBotResponseDto"];
                };
            };
        };
    };
    DeleteBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteBotResponseDto"];
                };
            };
        };
    };
    StartBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to start */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StartBotResponseDto"];
                };
            };
        };
    };
    StopBotById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot to stop */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StopBotResponseDto"];
                };
            };
        };
    };
    UpdateBotConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBotConfigurationRequestDto"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateBotConfigurationResponseDto"];
                };
            };
        };
    };
    GenerateInviteLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateBotInviteLinkResponseDto"];
                };
            };
        };
    };
    ValidateToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    token: string;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenValidationResult"];
                };
            };
        };
    };
    RegisterBotCommands: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier of the bot */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    guildId: string;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
        };
    };
    GetConstants: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConstantsResponseDto"];
                };
            };
        };
    };
}
