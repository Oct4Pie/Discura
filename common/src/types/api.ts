/**
 * API Types
 * 
 * This is the single source of truth for all API types used in Discura.
 * These types are used by both the frontend and backend.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY unless adding types that will be used
 * by TSOA controllers for schema generation.
 */

import { Bot, BotStatus as BotStatusEnum, LLMProvider } from './index';





























































































// ===== Base Response Types =====
export interface ErrorResponseDto {
  message: string;
  error?: string;
}





























































































export interface MessageResponseDto {
  message: string;
}





























































































// ===== User DTOs =====
export interface UserResponseDto {
  id: string;
  discordId: string;
  username: string;
  discriminator: string;
  avatar: string;
  email: string;
  bots: string[];
}





























































































export interface UserProfileResponseDto {
  user: UserResponseDto;
}





























































































// ===== Bot DTOs =====
export interface BotResponseDto {
  id: string;
  userId: string;
  name: string;
  discordToken?: string; // Optional as we may not want to return this in all responses
  applicationId: string;
  status: BotStatus;
  intents: string[];
  configuration: {
    systemPrompt: string;
    personality: string;
    traits: string[];
    backstory: string;
    llmProvider: string;
    llmModel: string;
    knowledge: Array<{
      id: string;
      name: string;
      content: string;
      type: string;
      source?: string;
    }>;
    imageGeneration: {
      enabled: boolean;
      provider: string;
      model?: string;
    };
    toolsEnabled: boolean;
    tools: Array<{
      id: string;
      name: string;
      description: string;
      parameters: Array<{
        name: string;
        type: string;
        description: string;
        required: boolean;
      }>;
    }>;
  };
  createdAt: string;
  updatedAt: string;
}





























































































export interface BotsResponseDto {
  bots: BotResponseDto[];
}





























































































export interface BotDetailResponseDto {
  bot: BotResponseDto;
}





























































































export interface CreateBotRequest {
  name: string;
  discordToken: string;
  applicationId: string;
  intents?: string[];
  configuration?: {
    systemPrompt?: string;
    personality?: string;
    traits?: string[];
    backstory?: string;
    llmProvider?: string;
    llmModel?: string;
    knowledge?: Array<{
      id?: string;
      name: string;
      content: string;
      type: string;
      source?: string;
    }>;
    imageGeneration?: {
      enabled?: boolean;
      provider?: string;
      model?: string;
    };
    toolsEnabled?: boolean;
    tools?: Array<{
      id?: string;
      name: string;
      description: string;
      parameters?: Array<{
        name: string;
        type: string;
        description: string;
        required: boolean;
      }>;
    }>;
  };
}





























































































export interface UpdateBotRequest {
  name?: string;
  discordToken?: string;
  applicationId?: string;
  intents?: string[];
  status?: BotStatus;
  configuration?: {
    systemPrompt?: string;
    personality?: string;
    traits?: string[];
    backstory?: string;
    llmProvider?: string;
    llmModel?: string;
    apiKey?: string;
    knowledge?: Array<{
      id?: string;
      name: string;
      content: string;
      type: string;
      source?: string;
    }>;
    imageGeneration?: {
      enabled?: boolean;
      provider?: string;
      model?: string;
      apiKey?: string;
    };
    toolsEnabled?: boolean;
    tools?: Array<{
      id: string;
      name: string;
      description: string;
      parameters?: Array<{
        name: string;
        type: string;
        description: string;
        required: boolean;
      }>;
      implementation?: string;
    }>;
  };
}





























































































// ===== Tool DTOs =====
export interface ToolDefinitionDto {
  id?: string;
  botId: string;
  name: string;
  description: string;
  schema: object;
  enabled: boolean;
}





























































































// ===== Knowledge Item DTOs =====
export interface KnowledgeItemDto {
  id: number;
  title: string;
  content: string;
  type: string;
  priority: number;
  createdAt: string;
  updatedAt: string;
}





























































































// ===== Bot Configuration DTO =====
export interface BotConfigurationDto {
  systemPrompt: string;
  personality: string;
  traits: string[];
  backstory: string;
  llmProvider: string;
  llmModel: string;
  apiKey: string;
  knowledge?: Array<{
    id: string;
    name: string;
    content: string;
    type: string;
    source?: string;
  }>;
  imageGeneration: {
    enabled: boolean;
    provider: string;
    apiKey?: string;
    model?: string;
  };
  toolsEnabled?: boolean;
  tools?: Array<{
    id: string;
    name: string;
    description: string;
    parameters?: Array<{
      name: string;
      type: string;
      description: string;
      required: boolean;
    }>;
  }>;
}





























































































// ===== LLM DTOs =====
export interface LLMModelData {
  id: string;
  object: string;
  created: number;
  owned_by: string;
}





























































































export interface LLMModelsResponseDto {
  object: string;
  data: LLMModelData[];
}





























































































export interface LLMCompletionMessage {
  role: string;
  content: string;
  name?: string;
}





























































































export interface LLMCompletionRequestDto {
  model: string;
  messages: LLMCompletionMessage[];
  temperature?: number;
  top_p?: number;
  n?: number;
  stream?: boolean;
  stop?: string | string[];
  max_tokens?: number;
  presence_penalty?: number;
  frequency_penalty?: number;
  user?: string;
}





























































































export interface LLMCompletionResponseChoice {
  index: number;
  message: LLMCompletionMessage;
  finish_reason: string;
}





























































































export interface LLMCompletionResponseUsage {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
}





























































































export interface LLMCompletionResponseDto {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: LLMCompletionResponseChoice[];
  usage: LLMCompletionResponseUsage;
}



























































































export interface KnowledgeBaseResponseDto {
  botId: string;
  items: KnowledgeItemDto[];
}





















































































export interface BotStatus {
}

